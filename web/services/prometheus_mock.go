// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package services

import (
	model "github.com/prometheus/common/model"
	mock "github.com/stretchr/testify/mock"

	models "github.com/trento-project/trento/web/models"

	time "time"
)

// MockPrometheusService is an autogenerated mock type for the PrometheusService type
type MockPrometheusService struct {
	mock.Mock
}

// GetHttpSDTargets provides a mock function with given fields:
func (_m *MockPrometheusService) GetHttpSDTargets() (models.PrometheusTargetsList, error) {
	ret := _m.Called()

	var r0 models.PrometheusTargetsList
	if rf, ok := ret.Get(0).(func() models.PrometheusTargetsList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.PrometheusTargetsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query, ts
func (_m *MockPrometheusService) Query(query string, ts time.Time) (model.Value, error) {
	ret := _m.Called(query, ts)

	var r0 model.Value
	if rf, ok := ret.Get(0).(func(string, time.Time) model.Value); ok {
		r0 = rf(query, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(query, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
